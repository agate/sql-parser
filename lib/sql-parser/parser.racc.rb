#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 331)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,   222,  -124,    29,    72,    67,    94,    94,   112,     7,
    45,   233,     8,   131,    69,   106,    61,   234,   224,    44,
   225,   226,   227,   136,   137,    70,    71,    69,   143,    45,
   144,   192,    69,    19,  -124,  -124,  -124,    69,    73,    19,
    19,    47,    48,   145,    33,    36,    38,    39,    40,    41,
    49,    50,    19,    53,    47,    48,    88,    87,   146,   147,
    47,    48,    69,    33,    36,    38,    39,    40,    41,    49,
    50,    44,    53,   150,   227,    99,    98,   134,   141,   171,
   172,    45,   173,   174,   175,   176,   177,   178,   133,   100,
    44,   102,   103,    29,   104,   105,   215,   216,     8,   180,
    45,   181,   132,    61,    19,    61,   187,   188,   127,   192,
   120,   204,    47,    48,   207,    33,    36,    38,    39,    40,
    41,    49,    50,    19,    53,   119,    69,   210,   211,    61,
   109,    47,    48,    19,    33,    36,    38,    39,    40,    41,
    49,    50,    44,    53,   221,    29,    99,    89,   120,    86,
    97,    14,    45,    85,    98,    84,   229,    83,  -143,    82,
   100,    44,   102,   103,    29,   104,   105,    81,    80,     8,
    79,    45,    78,   -80,     8,    19,    66,    65,    64,   244,
   192,   245,   207,    47,    48,    61,    33,    36,    38,    39,
    40,    41,    49,    50,    19,    53,   229,    55,    54,   249,
    12,    99,    47,    48,   251,    33,    36,    38,    39,    40,
    41,    49,    50,    44,    53,   100,   227,   102,   103,   192,
   104,   105,    69,    45,    19,   256,   193,   194,    11,   195,
   196,   197,    44,   258,   259,   227,   198,   199,   200,   201,
   202,   203,    45,   260,     9,    69,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,   nil,    33,    36,    38,
    39,    40,    41,    49,    50,    19,    53,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    33,    36,    38,    39,
    40,    41,    49,    50,    44,    53,   nil,   151,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,   nil,    29,   nil,   nil,   158,
   nil,   nil,   nil,    45,   nil,   nil,   155,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    33,    36,
    38,    39,    40,    41,    49,    50,    19,    53,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,   nil,    33,    36,    38,
    39,    40,    41,    49,    50,    44,    53,   nil,   151,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,    29,   nil,   nil,
   158,   nil,   nil,   nil,    45,   nil,   nil,   155,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    33,
    36,    38,    39,    40,    41,    49,    50,    19,    53,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    33,    36,
    38,    39,    40,    41,    49,    50,    44,    53,   nil,   227,
   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,    29,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    33,    36,    38,    39,    40,    41,    49,    50,    19,    53,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    33,
    36,    38,    39,    40,    41,    49,    50,    44,    53,   nil,
   151,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,    29,
   nil,   nil,   158,   nil,   nil,   nil,    45,   nil,   nil,   155,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    33,    36,    38,    39,    40,    41,    49,    50,    19,
    53,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    33,    36,    38,    39,    40,    41,    49,    50,    44,    53,
   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,
    29,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    33,    36,    38,    39,    40,    41,    49,    50,
    19,    53,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    33,    36,    38,    39,    40,    41,    49,    50,    44,
    53,   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,   nil,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,    45,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    33,    36,    38,    39,    40,    41,    49,
    50,    19,    53,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    33,    36,    38,    39,    40,    41,    49,    50,
    44,    53,   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    33,    36,    38,    39,    40,    41,
    49,    50,    19,    53,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    33,    36,    38,    39,    40,    41,    49,
    50,    44,    53,   nil,   227,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    44,   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,   nil,
    45,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    33,    36,    38,    39,    40,
    41,    49,    50,    19,    53,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    33,    36,    38,    39,    40,    41,
    49,    50,    44,    53,   nil,   227,   nil,   nil,   nil,   nil,
   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    44,   nil,   nil,   227,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    33,    36,    38,    39,
    40,    41,    49,    50,    19,    53,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    33,    36,    38,    39,    40,
    41,    49,    50,    44,    53,   nil,   151,   nil,   nil,   nil,
   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    44,   nil,   nil,   151,   nil,   155,    19,   nil,   nil,   nil,
    45,   nil,   nil,   nil,    47,    48,   nil,    33,    36,    38,
    39,    40,    41,    49,    50,   158,    53,    44,   nil,   nil,
   151,   nil,   155,    19,   nil,     8,   nil,    45,   nil,   nil,
   nil,    47,    48,   nil,    33,    36,    38,    39,    40,    41,
    49,    50,   158,    53,    44,   nil,   nil,    29,   nil,   155,
    19,   nil,   nil,   nil,    45,   nil,   nil,   nil,    47,    48,
   nil,    33,    36,    38,    39,    40,    41,    49,    50,    44,
    53,   nil,    29,   nil,   nil,   nil,   nil,    19,   nil,    45,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    33,    36,
    38,    39,    40,    41,    49,    50,    44,    53,   nil,    29,
   nil,   nil,    19,   nil,   nil,   nil,    45,   nil,   nil,   nil,
    47,    48,   nil,    33,    36,    38,    39,    40,    41,    49,
    50,    44,    53,   nil,    29,   nil,   nil,   nil,   nil,    19,
   nil,    45,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    33,    36,    38,    39,    40,    41,    49,    50,    44,    53,
   nil,   151,   nil,   nil,    19,   nil,   nil,   nil,    45,   nil,
   nil,   nil,    47,    48,   nil,    33,    36,    38,    39,    40,
    41,    49,    50,   158,    53,    44,   nil,   nil,    29,   nil,
   155,    19,   nil,   nil,   nil,    45,   nil,   nil,   nil,    47,
    48,   nil,    33,    36,    38,    39,    40,    41,    49,    50,
    44,    53,   nil,    29,   nil,   nil,   nil,   nil,    19,   nil,
    45,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    33,
    36,    38,    39,    40,    41,    49,    50,    44,    53,   nil,
    29,   nil,   nil,    19,   nil,   nil,   121,    45,   nil,   nil,
   nil,    47,    48,   nil,    33,    36,    38,    39,    40,    41,
    49,    50,    44,    53,   nil,   227,   nil,   nil,   nil,   nil,
    19,   nil,    45,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    33,    36,    38,    39,    40,    41,    49,    50,   nil,
    53,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    33,    36,    38,    39,
    40,    41,    49,    50,   nil,    53 ]

racc_action_check = [
    97,   190,    21,    97,    23,    18,    55,   134,    66,     0,
    97,   197,     0,    85,   119,    57,    99,   197,   193,   256,
   193,   193,   256,    92,    92,    22,    22,    18,   100,   256,
   101,   190,    66,    97,    21,    21,    21,    57,    23,    55,
   134,    97,    97,   103,    97,    97,    97,    97,    97,    97,
    97,    97,   256,    97,    85,    85,    50,    50,   104,   105,
   256,   256,   106,   256,   256,   256,   256,   256,   256,   256,
   256,   249,   256,   108,   249,   185,    96,    90,    98,   121,
   122,   249,   123,   124,   125,   126,   130,   132,    87,   185,
   229,   185,   185,   229,   185,   185,   185,   185,   229,   139,
   229,   140,    86,   143,   249,   144,   149,   150,    83,   152,
    77,   155,   249,   249,   156,   249,   249,   249,   249,   249,
   249,   249,   249,   229,   249,    76,    67,   182,   183,    64,
    63,   229,   229,   188,   229,   229,   229,   229,   229,   229,
   229,   229,     8,   229,   189,     8,    56,    53,   191,    49,
    56,     8,     8,    46,    56,    45,   195,    44,    42,    41,
    56,   227,    56,    56,   227,    56,    56,    40,    39,   227,
    38,   227,    36,    19,   204,     8,    17,    16,    13,   216,
   217,   218,   223,     8,     8,    12,     8,     8,     8,     8,
     8,     8,     8,     8,   227,     8,   225,    11,     9,   228,
     7,   110,   227,   227,   233,   227,   227,   227,   227,   227,
   227,   227,   227,   226,   227,   110,   226,   110,   110,   243,
   110,   110,   244,   226,   245,   246,   154,   154,     5,   154,
   154,   154,   224,   250,   252,   224,   154,   154,   154,   154,
   154,   154,   224,   253,     1,   260,   226,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   226,   226,   nil,   226,   226,   226,
   226,   226,   226,   226,   226,   224,   226,   nil,   nil,   nil,
   nil,   nil,   nil,   224,   224,   nil,   224,   224,   224,   224,
   224,   224,   224,   224,   215,   224,   nil,   215,   nil,   nil,
   nil,   nil,   nil,   nil,   215,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   211,   nil,   nil,   211,   nil,   nil,   215,
   nil,   nil,   nil,   211,   nil,   nil,   215,   215,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   215,   215,   nil,   215,   215,
   215,   215,   215,   215,   215,   215,   211,   215,   nil,   nil,
   nil,   nil,   nil,   nil,   211,   211,   nil,   211,   211,   211,
   211,   211,   211,   211,   211,   207,   211,   nil,   207,   nil,
   nil,   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   141,   nil,   nil,   141,   nil,   nil,
   207,   nil,   nil,   nil,   141,   nil,   nil,   207,   207,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   207,   207,   nil,   207,
   207,   207,   207,   207,   207,   207,   207,   141,   207,   nil,
   nil,   nil,   nil,   nil,   nil,   141,   141,   nil,   141,   141,
   141,   141,   141,   141,   141,   141,   203,   141,   nil,   203,
   nil,   nil,   nil,   nil,   nil,   nil,   203,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    73,   nil,   nil,    73,   nil,
   nil,   nil,   nil,   nil,   nil,    73,   nil,   nil,   nil,   203,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,   203,   nil,
   203,   203,   203,   203,   203,   203,   203,   203,    73,   203,
   nil,   nil,   nil,   nil,   nil,   nil,    73,    73,   nil,    73,
    73,    73,    73,    73,    73,    73,    73,   109,    73,   nil,
   109,   nil,   nil,   nil,   nil,   nil,   nil,   109,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    72,   nil,   nil,    72,
   nil,   nil,   109,   nil,   nil,   nil,    72,   nil,   nil,   109,
   109,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   109,   109,
   nil,   109,   109,   109,   109,   109,   109,   109,   109,    72,
   109,   nil,   nil,   nil,   nil,   nil,   nil,    72,    72,   nil,
    72,    72,    72,    72,    72,    72,    72,    72,    24,    72,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
    29,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,    24,    24,    24,    24,    24,    24,    24,
    29,    24,   nil,   nil,   nil,   nil,   nil,   nil,    29,    29,
   nil,    29,    29,    29,    29,    29,    29,    29,    29,   202,
    29,   nil,   202,   nil,   nil,   nil,   nil,   nil,   nil,   202,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   nil,
   nil,   201,   nil,   nil,   nil,   nil,   nil,   nil,   201,   nil,
   nil,   nil,   202,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   202,   202,   nil,   202,   202,   202,   202,   202,   202,   202,
   202,   201,   202,   nil,   nil,   nil,   nil,   nil,   nil,   201,
   201,   nil,   201,   201,   201,   201,   201,   201,   201,   201,
   200,   201,   nil,   200,   nil,   nil,   nil,   nil,   nil,   nil,
   200,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   181,
   nil,   nil,   181,   nil,   nil,   nil,   nil,   nil,   nil,   181,
   nil,   nil,   nil,   200,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   200,   200,   nil,   200,   200,   200,   200,   200,   200,
   200,   200,   181,   200,   nil,   nil,   nil,   nil,   nil,   nil,
   181,   181,   nil,   181,   181,   181,   181,   181,   181,   181,
   181,   198,   181,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   nil,   198,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    71,   nil,   nil,    71,   nil,   nil,   nil,   nil,   nil,   nil,
    71,   nil,   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   198,   198,   nil,   198,   198,   198,   198,   198,
   198,   198,   198,    71,   198,   nil,   nil,   nil,   nil,   nil,
   nil,    71,    71,   nil,    71,    71,    71,    71,    71,    71,
    71,    71,   196,    71,   nil,   196,   nil,   nil,   nil,   nil,
   nil,   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   194,   nil,   nil,   194,   nil,   nil,   nil,   nil,   nil,
   nil,   194,   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   196,   196,   nil,   196,   196,   196,   196,
   196,   196,   196,   196,   194,   196,   nil,   nil,   nil,   nil,
   nil,   nil,   194,   194,   nil,   194,   194,   194,   194,   194,
   194,   194,   194,   158,   194,   nil,   158,   nil,   nil,   nil,
   nil,   nil,   nil,   158,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   192,   nil,   nil,   192,   nil,   158,   158,   nil,   nil,   nil,
   192,   nil,   nil,   nil,   158,   158,   nil,   158,   158,   158,
   158,   158,   158,   158,   158,   192,   158,   151,   nil,   nil,
   151,   nil,   192,   192,   nil,   151,   nil,   151,   nil,   nil,
   nil,   192,   192,   nil,   192,   192,   192,   192,   192,   192,
   192,   192,   151,   192,    82,   nil,   nil,    82,   nil,   151,
   151,   nil,   nil,   nil,    82,   nil,   nil,   nil,   151,   151,
   nil,   151,   151,   151,   151,   151,   151,   151,   151,    70,
   151,   nil,    70,   nil,   nil,   nil,   nil,    82,   nil,    70,
   nil,   nil,   nil,   nil,   nil,    82,    82,   nil,    82,    82,
    82,    82,    82,    82,    82,    82,    81,    82,   nil,    81,
   nil,   nil,    70,   nil,   nil,   nil,    81,   nil,   nil,   nil,
    70,    70,   nil,    70,    70,    70,    70,    70,    70,    70,
    70,    80,    70,   nil,    80,   nil,   nil,   nil,   nil,    81,
   nil,    80,   nil,   nil,   nil,   nil,   nil,    81,    81,   nil,
    81,    81,    81,    81,    81,    81,    81,    81,   187,    81,
   nil,   187,   nil,   nil,    80,   nil,   nil,   nil,   187,   nil,
   nil,   nil,    80,    80,   nil,    80,    80,    80,    80,    80,
    80,    80,    80,   187,    80,    79,   nil,   nil,    79,   nil,
   187,   187,   nil,   nil,   nil,    79,   nil,   nil,   nil,   187,
   187,   nil,   187,   187,   187,   187,   187,   187,   187,   187,
    65,   187,   nil,    65,   nil,   nil,   nil,   nil,    79,   nil,
    65,   nil,   nil,   nil,   nil,   nil,    79,    79,   nil,    79,
    79,    79,    79,    79,    79,    79,    79,    78,    79,   nil,
    78,   nil,   nil,    65,   nil,   nil,    78,    78,   nil,   nil,
   nil,    65,    65,   nil,    65,    65,    65,    65,    65,    65,
    65,    65,   199,    65,   nil,   199,   nil,   nil,   nil,   nil,
    78,   nil,   199,   nil,   nil,   nil,   nil,   nil,    78,    78,
   nil,    78,    78,    78,    78,    78,    78,    78,    78,   nil,
    78,   nil,   nil,   nil,   nil,   199,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   199,   199,   nil,   199,   199,   199,   199,
   199,   199,   199,   199,   nil,   199 ]

racc_action_pointer = [
    -1,   244,   nil,   nil,   nil,   226,   nil,   189,   137,   198,
   nil,   194,   147,   161,   nil,   nil,   173,   161,   -11,   158,
   nil,   -12,   -21,   -10,   563,   nil,   nil,   nil,   nil,   582,
   nil,   nil,   nil,   nil,   nil,   nil,   164,   nil,   162,   160,
   159,   151,   103,   nil,   142,   150,    98,   nil,   nil,    93,
     0,   nil,   nil,    88,   nil,     1,   142,    -1,   nil,   nil,
   nil,   nil,   nil,   103,    91,  1155,    -6,    88,   nil,   nil,
  1024,   795,   511,   440,   nil,   nil,   110,   101,  1182,  1130,
  1076,  1051,   999,   103,   nil,     8,    45,    32,   nil,   nil,
    73,   nil,    17,   nil,   nil,   nil,    64,    -5,    70,   -22,
     9,    11,   nil,    21,    36,    37,    24,   nil,    45,   492,
   197,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -24,
   nil,    70,    71,    73,    74,    75,    76,   nil,   nil,   nil,
    81,   nil,    31,   nil,     2,   nil,   nil,   nil,   nil,    90,
    97,   369,   nil,    65,    67,   nil,   nil,   nil,   nil,    77,
   104,   972,    70,   nil,   196,   103,    82,   nil,   918,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   724,   118,   124,   nil,    71,   nil,  1103,    95,   135,
    -8,   139,   945,   -13,   866,   148,   847,   -19,   776,  1207,
   705,   653,   634,   421,   161,   nil,   nil,   350,   nil,   nil,
   nil,   298,   nil,   nil,   nil,   279,   171,   141,   177,   nil,
   nil,   nil,   nil,   150,   227,   188,   208,   156,   167,    85,
   nil,   nil,   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   180,   184,   186,   193,   nil,   nil,    66,
   224,   nil,   225,   239,   nil,   nil,    14,   nil,   nil,   nil,
   207,   nil,   nil ]

racc_action_default = [
  -156,  -156,    -1,    -2,    -3,    -5,   -16,  -156,  -156,  -156,
    -4,  -156,  -156,   -24,   -25,   -26,   -28,  -156,   -32,  -149,
  -107,  -108,  -111,  -114,  -156,  -116,  -117,  -118,  -119,  -156,
  -121,  -122,  -123,  -125,  -127,  -128,  -156,  -130,  -156,  -156,
  -156,  -156,  -136,  -137,  -141,  -156,  -156,  -147,  -148,  -156,
  -156,  -153,  -154,  -156,   263,  -156,  -156,   -37,   -38,   -40,
   -41,   -80,   -23,   -57,  -156,  -156,  -156,  -156,   -31,  -149,
  -156,  -156,  -156,  -156,  -115,  -124,  -156,  -156,  -156,  -156,
  -156,  -156,  -156,  -139,  -140,  -156,  -156,  -156,  -152,  -155,
    -6,    -8,   -12,   -10,   -11,   -17,  -156,  -156,  -156,  -156,
  -156,  -156,   -45,   -47,   -49,   -50,  -156,   -36,   -59,  -156,
   -34,   -27,   -29,  -126,   -30,  -109,  -110,  -112,  -113,  -156,
  -120,  -156,  -156,  -156,  -156,  -156,  -156,  -138,  -142,  -144,
  -156,  -146,  -156,  -151,  -156,    -9,   -13,   -14,   -18,  -156,
   -21,  -156,   -42,  -156,  -156,   -46,   -48,   -51,   -35,   -64,
  -156,  -156,   -58,   -66,  -156,  -156,   -83,   -85,  -156,   -88,
   -89,   -90,   -92,   -93,   -94,   -95,   -96,   -97,  -104,  -105,
  -106,  -129,  -131,  -132,  -133,  -134,  -135,  -145,  -150,    -7,
   -19,  -156,  -156,   -74,   -43,  -156,   -33,  -156,  -156,  -156,
  -156,  -106,  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,
  -156,  -156,  -156,  -156,  -156,   -39,   -79,  -156,   -87,   -20,
   -22,  -156,   -44,   -52,   -53,  -156,  -156,   -65,   -60,   -62,
   -63,   -15,   -91,   -84,  -156,  -156,  -156,  -156,  -156,  -156,
   -70,   -71,   -76,  -156,   -78,   -98,   -99,  -100,  -101,  -102,
  -103,   -86,   -73,   -54,  -156,  -156,  -156,   -69,   -75,  -156,
  -156,   -77,  -156,   -56,   -82,   -61,  -156,   -68,   -72,   -55,
  -156,   -67,   -81 ]

racc_goto_table = [
    68,    18,    93,   139,    56,   152,    91,    57,   182,   149,
   205,    95,   219,    17,    75,    13,   230,   117,   118,    15,
   115,   116,    77,    96,    63,   108,    62,   186,   135,   206,
   212,   213,   214,     1,   252,   253,   228,   218,   232,   107,
   235,   236,   237,   238,   239,   240,   247,   190,   113,   114,
   205,   138,    90,    10,     5,   223,   110,   241,    18,    57,
    75,    75,    75,    75,   208,     4,   246,     3,   248,   255,
    17,   122,   123,   124,   125,   126,   111,     2,   242,   130,
   205,    93,    74,   217,   128,   179,   129,   209,   148,   nil,
   140,   257,   nil,   nil,   142,   nil,   250,   nil,   261,   nil,
   nil,   113,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   243,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   183,   220,   185,   nil,   184,    57,
   nil,   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   140,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   220,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   183,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,   nil,   183,   nil,   nil,   nil,   254,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   262 ]

racc_goto_check = [
    25,    18,    11,    17,    14,    39,     8,    30,    19,    28,
    12,    15,    43,    24,    60,    20,    48,    61,    61,    22,
    59,    59,    18,    16,    26,    27,    21,    29,    10,    32,
    36,    37,    38,     1,    40,    41,    46,    42,    46,    25,
    46,    46,    46,    46,    46,    46,    48,    39,    25,    25,
    12,    15,     7,     6,     5,    52,    14,    53,    18,    30,
    60,    60,    60,    60,    54,     4,    46,     3,    46,    43,
    24,    18,    18,    18,    18,    18,    22,     2,    19,    63,
    12,    11,    64,    39,    74,     8,    75,    17,    25,   nil,
    18,    46,   nil,   nil,    30,   nil,    19,   nil,    46,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    11,    14,   nil,    30,    30,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,    18,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25 ]

racc_goto_pointer = [
   nil,    33,    77,    67,    65,    54,    48,    -3,   -49,   nil,
   -64,   -53,  -145,   nil,    -8,   -45,   -33,   -94,    -7,  -133,
     7,    13,    11,   nil,     5,   -18,    11,   -38,   -99,  -122,
    -5,   nil,  -126,   nil,   nil,   nil,  -155,  -154,  -153,  -104,
  -210,  -209,  -151,  -176,   nil,   nil,  -158,   nil,  -179,   nil,
   nil,   nil,  -137,  -150,   -94,   nil,   nil,   nil,   nil,   -50,
   -10,   -55,   nil,    -6,    58,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    -1,     1,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   189,   nil,   nil,   nil,    92,
   nil,    27,   153,     6,   nil,   nil,   nil,   nil,   170,   nil,
   nil,   nil,   nil,    16,    76,    34,   nil,   nil,   nil,   nil,
    35,    58,   231,    59,    60,   101,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   169,   163,   154,   164,   nil,   165,
   166,   167,   156,   157,   159,   160,   161,   162,   168,    20,
    21,    22,    23,    24,    25,    26,    28,    30,    31,    32,
    37,    42,    43,    46,   nil,   nil,    51,    52 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 61, :_reduce_none,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  2, 63, :_reduce_4,
  0, 66, :_reduce_none,
  3, 66, :_reduce_6,
  3, 67, :_reduce_7,
  1, 67, :_reduce_none,
  2, 68, :_reduce_9,
  1, 69, :_reduce_none,
  1, 69, :_reduce_11,
  0, 70, :_reduce_12,
  1, 70, :_reduce_13,
  1, 70, :_reduce_14,
  3, 72, :_reduce_15,
  1, 65, :_reduce_none,
  4, 64, :_reduce_17,
  5, 64, :_reduce_18,
  3, 76, :_reduce_19,
  3, 77, :_reduce_20,
  1, 77, :_reduce_none,
  4, 75, :_reduce_22,
  3, 73, :_reduce_23,
  2, 73, :_reduce_24,
  1, 80, :_reduce_25,
  1, 80, :_reduce_26,
  3, 82, :_reduce_27,
  1, 82, :_reduce_none,
  3, 82, :_reduce_29,
  3, 83, :_reduce_30,
  2, 83, :_reduce_31,
  1, 83, :_reduce_none,
  4, 81, :_reduce_33,
  2, 86, :_reduce_34,
  3, 74, :_reduce_35,
  2, 74, :_reduce_36,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 92, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 93, :_reduce_42,
  4, 93, :_reduce_43,
  5, 94, :_reduce_44,
  1, 95, :_reduce_45,
  2, 95, :_reduce_46,
  1, 95, :_reduce_47,
  2, 95, :_reduce_48,
  1, 95, :_reduce_49,
  1, 95, :_reduce_50,
  2, 95, :_reduce_51,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  2, 97, :_reduce_54,
  4, 98, :_reduce_55,
  1, 100, :_reduce_none,
  0, 87, :_reduce_none,
  2, 87, :_reduce_58,
  0, 88, :_reduce_none,
  3, 88, :_reduce_60,
  3, 102, :_reduce_61,
  1, 102, :_reduce_none,
  1, 103, :_reduce_none,
  0, 89, :_reduce_none,
  2, 89, :_reduce_65,
  1, 104, :_reduce_none,
  6, 105, :_reduce_67,
  5, 105, :_reduce_68,
  4, 107, :_reduce_69,
  3, 107, :_reduce_70,
  1, 108, :_reduce_none,
  3, 108, :_reduce_72,
  3, 79, :_reduce_73,
  1, 79, :_reduce_none,
  4, 109, :_reduce_75,
  3, 109, :_reduce_76,
  4, 110, :_reduce_77,
  3, 110, :_reduce_78,
  2, 111, :_reduce_79,
  1, 90, :_reduce_80,
  3, 101, :_reduce_81,
  1, 101, :_reduce_none,
  1, 99, :_reduce_none,
  3, 99, :_reduce_84,
  1, 112, :_reduce_none,
  3, 112, :_reduce_86,
  2, 113, :_reduce_87,
  1, 113, :_reduce_none,
  1, 114, :_reduce_none,
  1, 115, :_reduce_none,
  3, 115, :_reduce_91,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  3, 117, :_reduce_98,
  3, 117, :_reduce_99,
  3, 117, :_reduce_100,
  3, 117, :_reduce_101,
  3, 117, :_reduce_102,
  3, 117, :_reduce_103,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 118, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  3, 119, :_reduce_109,
  3, 119, :_reduce_110,
  1, 119, :_reduce_none,
  3, 121, :_reduce_112,
  3, 121, :_reduce_113,
  1, 121, :_reduce_none,
  2, 122, :_reduce_115,
  1, 122, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  3, 124, :_reduce_120,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 128, :_reduce_125,
  3, 71, :_reduce_126,
  1, 71, :_reduce_none,
  1, 84, :_reduce_none,
  4, 126, :_reduce_129,
  1, 126, :_reduce_none,
  4, 130, :_reduce_131,
  4, 130, :_reduce_132,
  4, 130, :_reduce_133,
  4, 130, :_reduce_134,
  4, 130, :_reduce_135,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  3, 131, :_reduce_138,
  2, 131, :_reduce_139,
  2, 131, :_reduce_140,
  1, 131, :_reduce_141,
  3, 132, :_reduce_142,
  1, 133, :_reduce_none,
  1, 134, :_reduce_none,
  2, 135, :_reduce_145,
  1, 135, :_reduce_146,
  1, 123, :_reduce_147,
  1, 123, :_reduce_148,
  1, 85, :_reduce_149,
  4, 120, :_reduce_150,
  3, 120, :_reduce_151,
  2, 120, :_reduce_152,
  1, 120, :_reduce_none,
  1, 136, :_reduce_none,
  2, 137, :_reduce_155 ]

racc_reduce_n = 156

racc_shift_n = 263

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :VALUES => 12,
  :SELECT => 13,
  :asterisk => 14,
  :period => 15,
  :AS => 16,
  :FROM => 17,
  :CROSS => 18,
  :JOIN => 19,
  :INNER => 20,
  :LEFT => 21,
  :OUTER => 22,
  :RIGHT => 23,
  :FULL => 24,
  :ON => 25,
  :USING => 26,
  :WHERE => 27,
  :GROUP => 28,
  :HAVING => 29,
  :NOT => 30,
  :BETWEEN => 31,
  :AND => 32,
  :IN => 33,
  :LIKE => 34,
  :IS => 35,
  :NULL => 36,
  :EXISTS => 37,
  :identifier => 38,
  :OR => 39,
  :equals_operator => 40,
  :not_equals_operator => 41,
  :less_than_operator => 42,
  :greater_than_operator => 43,
  :less_than_or_equals_operator => 44,
  :greater_than_or_equals_operator => 45,
  :plus_sign => 46,
  :minus_sign => 47,
  :solidus => 48,
  :CURRENT_USER => 49,
  :COUNT => 50,
  :AVG => 51,
  :MAX => 52,
  :MIN => 53,
  :SUM => 54,
  :E => 55,
  :quote => 56,
  :character_string_literal => 57,
  :DATE => 58,
  :date_string => 59 }

racc_nt_base = 60

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "period",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "qualifier",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::QualifiedAsterisk.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_73(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_81(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 203)
  def _reduce_91(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_115(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_120(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_145(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
